#!/usr/bin/env perl

use 5.006;
use strict;
use warnings;

if ( !caller ) {
    main(@ARGV);
    exit 1;
}

sub usage {
    print "usage: check-travis-perl-version { --appveyor | --travis }\n";
    exit 1;
}

sub main {
    my ($mode) = @_;
    usage if !@_;

    if ( $mode eq '--appveyor' ) {
        die "Environment variable APPVEYOR does not exist\n" if !exists $ENV{APPVEYOR};
        die "Environment variable APPVEYOR is not set to True\n" if $ENV{APPVEYOR} ne 'True';

        if ( !exists $ENV{PERL_VERSION} ) {
            print "Perl:          $]\n";

            print "No specific Perl version requested.\n";
            exit 0;
        }

        print "AppVeyor Perl: $ENV{PERL_VERSION}\n";
        print "Perl:          $]\n";

        die "Unable to parse environment variable PERL_VERSION\n" if $ENV{PERL_VERSION} !~ m{ ^ ( 5 ) [.] ( [0-9]+ ) (?: [.] ( [0-9]+ ) )? (?: [.] [0-9]+ )? $ }xsm;
        my ( $major, $minor, $patch ) = ( $1, $2, $3 );    ## no critic (RegularExpressions::ProhibitCaptureWithoutTest)

        if ( !_check_perl_version( $major, $minor, $patch ) ) {
            die "We asked for Perl $ENV{PERL_VERSION} but got $]\n";
        }

        print "Perl $ENV{PERL_VERSION} is requested and $] is installed. Good!\n";
    }
    elsif ( $mode eq '--travis' ) {
        print "Travis Perl: $ENV{TRAVIS_PERL_VERSION}\n";
        print "Perl:        $]\n";

        die "Unable to parse environment variable TRAVIS_PERL_VERSION\n" if $ENV{TRAVIS_PERL_VERSION} !~ m{ ^ ( 5 ) [.] ( [0-9]+ ) (?: [.] ( [0-9]+ ) )? $ }xsm;
        my ( $major, $minor, $patch ) = ( $1, $2, $3 );    ## no critic (RegularExpressions::ProhibitCaptureWithoutTest)

        if ( !_check_perl_version( $major, $minor, $patch ) ) {
            die "We asked for Perl $ENV{TRAVIS_PERL_VERSION} but got $]\n";
        }

        print "Perl $ENV{TRAVIS_PERL_VERSION} is requested and $] is installed. Good!\n";
    }
    else {
        die "Unknown CI system to check: $mode\n";
    }

    exit 0;
}

sub _check_perl_version {
    my ( $major, $minor, $patch ) = @_;

    if ( defined $patch ) {
        my $want = sprintf '%i.%03i', $major, $minor;
        return 1 if $] eq $want && $patch eq q{0};

        $want .= sprintf '%03i', $patch;

        return 1 if $] eq $want;
    }
    else {
        my $min = $major + $minor * 0.001;
        my $max = $major + ( $minor + 1 ) * 0.001;

        return 1 if $] >= $min && $] < $max;
    }

    return;
}

1;

__END__

=pod

=encoding UTF-8

=head1 NAME

check-ci-perl-version - Check that we have the request Perl version on AppVeyor or Travis CI

=head1 VERSION

Version 1.000

=head1 DESCRIPTION

Checks that the Perl version this script runs under is the version specified
in the C<TRAVIS_PERL_VERSION> or C<PERL_VERSION> environment variable.

=head1 SUPPORT

=head2 Bugs / Feature Requests

Please report any bugs or feature requests through the issue tracker
at L<https://github.com/skirmess/dzil-inc/issues>.
You will be notified automatically of any progress on your issue.

=head2 Source Code

This is open source software. The code repository is available for
public review and contribution under the terms of the license.

L<https://github.com/skirmess/dzil-inc>

  git clone https://github.com/skirmess/dzil-inc.git

=head1 AUTHOR

Sven Kirmess <sven.kirmess@kzone.ch>

=head1 COPYRIGHT AND LICENSE

This software is Copyright (c) 2017-2018 by Sven Kirmess.

This is free software, licensed under:

  The (two-clause) FreeBSD License

=cut

# vim: ts=4 sts=4 sw=4 et: syntax=perl
